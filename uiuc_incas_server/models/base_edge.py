# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.3.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseEdge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edge_id': 'str',
        'time_stamp': 'str',
        'provider_name': 'str',
        'enrichment_name': 'str',
        'distance_name': 'str',
        'version': 'str',
        'distance': 'float',
        'edge_type': 'str'
    }

    attribute_map = {
        'edge_id': 'edgeId',
        'time_stamp': 'timeStamp',
        'provider_name': 'providerName',
        'enrichment_name': 'enrichmentName',
        'distance_name': 'distanceName',
        'version': 'version',
        'distance': 'distance',
        'edge_type': 'edgeType'
    }

    def __init__(self, edge_id=None, time_stamp=None, provider_name=None, enrichment_name=None, distance_name=None, version=None, distance=None, edge_type=None):  # noqa: E501
        """BaseEdge - a model defined in Swagger"""  # noqa: E501
        self._edge_id = None
        self._time_stamp = None
        self._provider_name = None
        self._enrichment_name = None
        self._distance_name = None
        self._version = None
        self._distance = None
        self._edge_type = None
        self.discriminator = None
        if edge_id is not None:
            self.edge_id = edge_id
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if provider_name is not None:
            self.provider_name = provider_name
        if enrichment_name is not None:
            self.enrichment_name = enrichment_name
        if distance_name is not None:
            self.distance_name = distance_name
        if version is not None:
            self.version = version
        if distance is not None:
            self.distance = distance
        self.edge_type = edge_type

    @property
    def edge_id(self):
        """Gets the edge_id of this BaseEdge.  # noqa: E501


        :return: The edge_id of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id):
        """Sets the edge_id of this BaseEdge.


        :param edge_id: The edge_id of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._edge_id = edge_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this BaseEdge.  # noqa: E501


        :return: The time_stamp of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this BaseEdge.


        :param time_stamp: The time_stamp of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def provider_name(self):
        """Gets the provider_name of this BaseEdge.  # noqa: E501

        The team who builds this graph.  # noqa: E501

        :return: The provider_name of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this BaseEdge.

        The team who builds this graph.  # noqa: E501

        :param provider_name: The provider_name of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def enrichment_name(self):
        """Gets the enrichment_name of this BaseEdge.  # noqa: E501

        The type of enrichment used to construct the graph.  # noqa: E501

        :return: The enrichment_name of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._enrichment_name

    @enrichment_name.setter
    def enrichment_name(self, enrichment_name):
        """Sets the enrichment_name of this BaseEdge.

        The type of enrichment used to construct the graph.  # noqa: E501

        :param enrichment_name: The enrichment_name of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._enrichment_name = enrichment_name

    @property
    def distance_name(self):
        """Gets the distance_name of this BaseEdge.  # noqa: E501

        The type of distance used to contruct the graph edges.  # noqa: E501

        :return: The distance_name of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._distance_name

    @distance_name.setter
    def distance_name(self, distance_name):
        """Sets the distance_name of this BaseEdge.

        The type of distance used to contruct the graph edges.  # noqa: E501

        :param distance_name: The distance_name of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._distance_name = distance_name

    @property
    def version(self):
        """Gets the version of this BaseEdge.  # noqa: E501

        The version ID within the same (providerName, enrichmentName, distanceName)  # noqa: E501

        :return: The version of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BaseEdge.

        The version ID within the same (providerName, enrichmentName, distanceName)  # noqa: E501

        :param version: The version of this BaseEdge.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def distance(self):
        """Gets the distance of this BaseEdge.  # noqa: E501


        :return: The distance of this BaseEdge.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this BaseEdge.


        :param distance: The distance of this BaseEdge.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def edge_type(self):
        """Gets the edge_type of this BaseEdge.  # noqa: E501

        For discriminator  # noqa: E501

        :return: The edge_type of this BaseEdge.  # noqa: E501
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type):
        """Sets the edge_type of this BaseEdge.

        For discriminator  # noqa: E501

        :param edge_type: The edge_type of this BaseEdge.  # noqa: E501
        :type: str
        """
        if edge_type is None:
            raise ValueError("Invalid value for `edge_type`, must not be `None`")  # noqa: E501
        allowed_values = ["message_message", "actor_actor", "actor_message", "message_actor"]  # noqa: E501
        if edge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `edge_type` ({0}), must be one of {1}"  # noqa: E501
                .format(edge_type, allowed_values)
            )

        self._edge_type = edge_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseEdge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
