# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uiuc_incas_server.models.base_model_ import Model
from uiuc_incas_server.models.offset import Offset  # noqa: F401,E501
from uiuc_incas_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, id: str=None, provider_name: str=None, type: str=None, offsets: List[Offset]=None, text: str=None, confidence: float=None):  # noqa: E501
        """Annotation - a model defined in Swagger

        :param name: The name of this Annotation.  # noqa: E501
        :type name: str
        :param id: The id of this Annotation.  # noqa: E501
        :type id: str
        :param provider_name: The provider_name of this Annotation.  # noqa: E501
        :type provider_name: str
        :param type: The type of this Annotation.  # noqa: E501
        :type type: str
        :param offsets: The offsets of this Annotation.  # noqa: E501
        :type offsets: List[Offset]
        :param text: The text of this Annotation.  # noqa: E501
        :type text: str
        :param confidence: The confidence of this Annotation.  # noqa: E501
        :type confidence: float
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'provider_name': str,
            'type': str,
            'offsets': List[Offset],
            'text': str,
            'confidence': float
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'provider_name': 'providerName',
            'type': 'type',
            'offsets': 'offsets',
            'text': 'text',
            'confidence': 'confidence'
        }
        self._name = name
        self._id = id
        self._provider_name = provider_name
        self._type = type
        self._offsets = offsets
        self._text = text
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Annotation of this Annotation.  # noqa: E501
        :rtype: Annotation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Annotation.


        :return: The name of this Annotation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Annotation.


        :param name: The name of this Annotation.
        :type name: str
        """

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this Annotation.


        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Annotation.


        :param id: The id of this Annotation.
        :type id: str
        """

        self._id = id

    @property
    def provider_name(self) -> str:
        """Gets the provider_name of this Annotation.


        :return: The provider_name of this Annotation.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name: str):
        """Sets the provider_name of this Annotation.


        :param provider_name: The provider_name of this Annotation.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def type(self) -> str:
        """Gets the type of this Annotation.


        :return: The type of this Annotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Annotation.


        :param type: The type of this Annotation.
        :type type: str
        """

        self._type = type

    @property
    def offsets(self) -> List[Offset]:
        """Gets the offsets of this Annotation.


        :return: The offsets of this Annotation.
        :rtype: List[Offset]
        """
        return self._offsets

    @offsets.setter
    def offsets(self, offsets: List[Offset]):
        """Sets the offsets of this Annotation.


        :param offsets: The offsets of this Annotation.
        :type offsets: List[Offset]
        """

        self._offsets = offsets

    @property
    def text(self) -> str:
        """Gets the text of this Annotation.


        :return: The text of this Annotation.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Annotation.


        :param text: The text of this Annotation.
        :type text: str
        """

        self._text = text

    @property
    def confidence(self) -> float:
        """Gets the confidence of this Annotation.


        :return: The confidence of this Annotation.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this Annotation.


        :param confidence: The confidence of this Annotation.
        :type confidence: float
        """

        self._confidence = confidence
