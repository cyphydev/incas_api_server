# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.6.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Annotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'provider_name': 'str',
        'type': 'str',
        'offsets': 'list[Offset]',
        'text': 'str',
        'confidence': 'float'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'provider_name': 'providerName',
        'type': 'type',
        'offsets': 'offsets',
        'text': 'text',
        'confidence': 'confidence'
    }

    def __init__(self, name=None, id=None, provider_name=None, type=None, offsets=None, text=None, confidence=None):  # noqa: E501
        """Annotation - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._provider_name = None
        self._type = None
        self._offsets = None
        self._text = None
        self._confidence = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if provider_name is not None:
            self.provider_name = provider_name
        if type is not None:
            self.type = type
        if offsets is not None:
            self.offsets = offsets
        if text is not None:
            self.text = text
        if confidence is not None:
            self.confidence = confidence

    @property
    def name(self):
        """Gets the name of this Annotation.  # noqa: E501


        :return: The name of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Annotation.


        :param name: The name of this Annotation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this Annotation.  # noqa: E501


        :return: The id of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Annotation.


        :param id: The id of this Annotation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def provider_name(self):
        """Gets the provider_name of this Annotation.  # noqa: E501


        :return: The provider_name of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Annotation.


        :param provider_name: The provider_name of this Annotation.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def type(self):
        """Gets the type of this Annotation.  # noqa: E501


        :return: The type of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Annotation.


        :param type: The type of this Annotation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def offsets(self):
        """Gets the offsets of this Annotation.  # noqa: E501


        :return: The offsets of this Annotation.  # noqa: E501
        :rtype: list[Offset]
        """
        return self._offsets

    @offsets.setter
    def offsets(self, offsets):
        """Sets the offsets of this Annotation.


        :param offsets: The offsets of this Annotation.  # noqa: E501
        :type: list[Offset]
        """

        self._offsets = offsets

    @property
    def text(self):
        """Gets the text of this Annotation.  # noqa: E501


        :return: The text of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Annotation.


        :param text: The text of this Annotation.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def confidence(self):
        """Gets the confidence of this Annotation.  # noqa: E501


        :return: The confidence of this Annotation.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Annotation.


        :param confidence: The confidence of this Annotation.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Annotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Annotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
