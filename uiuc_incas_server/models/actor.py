# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.7.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Actor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'actor_name': 'str',
        'links': 'Links',
        'entity_type': 'str',
        'media_resources': 'list[MediaResource]',
        'knowledge_base_url': 'str',
        'language': 'str',
        'description': 'str',
        'annotations': 'list[Annotation]',
        'extra_attributes': 'list[ExtraAttribute]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'actor_name': 'actorName',
        'links': 'links',
        'entity_type': 'entityType',
        'media_resources': 'mediaResources',
        'knowledge_base_url': 'knowledgeBaseUrl',
        'language': 'language',
        'description': 'description',
        'annotations': 'annotations',
        'extra_attributes': 'extraAttributes'
    }

    def __init__(self, name=None, id=None, actor_name=None, links=None, entity_type=None, media_resources=None, knowledge_base_url=None, language=None, description=None, annotations=None, extra_attributes=None):  # noqa: E501
        """Actor - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._actor_name = None
        self._links = None
        self._entity_type = None
        self._media_resources = None
        self._knowledge_base_url = None
        self._language = None
        self._description = None
        self._annotations = None
        self._extra_attributes = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if actor_name is not None:
            self.actor_name = actor_name
        if links is not None:
            self.links = links
        if entity_type is not None:
            self.entity_type = entity_type
        if media_resources is not None:
            self.media_resources = media_resources
        if knowledge_base_url is not None:
            self.knowledge_base_url = knowledge_base_url
        if language is not None:
            self.language = language
        if description is not None:
            self.description = description
        if annotations is not None:
            self.annotations = annotations
        if extra_attributes is not None:
            self.extra_attributes = extra_attributes

    @property
    def name(self):
        """Gets the name of this Actor.  # noqa: E501


        :return: The name of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Actor.


        :param name: The name of this Actor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this Actor.  # noqa: E501


        :return: The id of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Actor.


        :param id: The id of this Actor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def actor_name(self):
        """Gets the actor_name of this Actor.  # noqa: E501


        :return: The actor_name of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._actor_name

    @actor_name.setter
    def actor_name(self, actor_name):
        """Sets the actor_name of this Actor.


        :param actor_name: The actor_name of this Actor.  # noqa: E501
        :type: str
        """

        self._actor_name = actor_name

    @property
    def links(self):
        """Gets the links of this Actor.  # noqa: E501


        :return: The links of this Actor.  # noqa: E501
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Actor.


        :param links: The links of this Actor.  # noqa: E501
        :type: Links
        """

        self._links = links

    @property
    def entity_type(self):
        """Gets the entity_type of this Actor.  # noqa: E501


        :return: The entity_type of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Actor.


        :param entity_type: The entity_type of this Actor.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENTITY_UNSPECIFIED", "Person", "Media", "Organization", "Government"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def media_resources(self):
        """Gets the media_resources of this Actor.  # noqa: E501


        :return: The media_resources of this Actor.  # noqa: E501
        :rtype: list[MediaResource]
        """
        return self._media_resources

    @media_resources.setter
    def media_resources(self, media_resources):
        """Sets the media_resources of this Actor.


        :param media_resources: The media_resources of this Actor.  # noqa: E501
        :type: list[MediaResource]
        """

        self._media_resources = media_resources

    @property
    def knowledge_base_url(self):
        """Gets the knowledge_base_url of this Actor.  # noqa: E501


        :return: The knowledge_base_url of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._knowledge_base_url

    @knowledge_base_url.setter
    def knowledge_base_url(self, knowledge_base_url):
        """Sets the knowledge_base_url of this Actor.


        :param knowledge_base_url: The knowledge_base_url of this Actor.  # noqa: E501
        :type: str
        """

        self._knowledge_base_url = knowledge_base_url

    @property
    def language(self):
        """Gets the language of this Actor.  # noqa: E501


        :return: The language of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Actor.


        :param language: The language of this Actor.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def description(self):
        """Gets the description of this Actor.  # noqa: E501


        :return: The description of this Actor.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Actor.


        :param description: The description of this Actor.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def annotations(self):
        """Gets the annotations of this Actor.  # noqa: E501


        :return: The annotations of this Actor.  # noqa: E501
        :rtype: list[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Actor.


        :param annotations: The annotations of this Actor.  # noqa: E501
        :type: list[Annotation]
        """

        self._annotations = annotations

    @property
    def extra_attributes(self):
        """Gets the extra_attributes of this Actor.  # noqa: E501


        :return: The extra_attributes of this Actor.  # noqa: E501
        :rtype: list[ExtraAttribute]
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes):
        """Sets the extra_attributes of this Actor.


        :param extra_attributes: The extra_attributes of this Actor.  # noqa: E501
        :type: list[ExtraAttribute]
        """

        self._extra_attributes = extra_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Actor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Actor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
