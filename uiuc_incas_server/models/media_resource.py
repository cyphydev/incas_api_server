# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uiuc_incas_server.models.base_model_ import Model
from uiuc_incas_server import util


class MediaResource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, account_type: str=None, account_id: str=None, user_names: List[str]=None, hashed_user_names: List[str]=None, account_status: str=None, display_names: List[str]=None, verified: bool=None, url: str=None):  # noqa: E501
        """MediaResource - a model defined in Swagger

        :param account_type: The account_type of this MediaResource.  # noqa: E501
        :type account_type: str
        :param account_id: The account_id of this MediaResource.  # noqa: E501
        :type account_id: str
        :param user_names: The user_names of this MediaResource.  # noqa: E501
        :type user_names: List[str]
        :param hashed_user_names: The hashed_user_names of this MediaResource.  # noqa: E501
        :type hashed_user_names: List[str]
        :param account_status: The account_status of this MediaResource.  # noqa: E501
        :type account_status: str
        :param display_names: The display_names of this MediaResource.  # noqa: E501
        :type display_names: List[str]
        :param verified: The verified of this MediaResource.  # noqa: E501
        :type verified: bool
        :param url: The url of this MediaResource.  # noqa: E501
        :type url: str
        """
        self.swagger_types = {
            'account_type': str,
            'account_id': str,
            'user_names': List[str],
            'hashed_user_names': List[str],
            'account_status': str,
            'display_names': List[str],
            'verified': bool,
            'url': str
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'account_id': 'accountId',
            'user_names': 'userNames',
            'hashed_user_names': 'hashedUserNames',
            'account_status': 'accountStatus',
            'display_names': 'displayNames',
            'verified': 'verified',
            'url': 'url'
        }
        self._account_type = account_type
        self._account_id = account_id
        self._user_names = user_names
        self._hashed_user_names = hashed_user_names
        self._account_status = account_status
        self._display_names = display_names
        self._verified = verified
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'MediaResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaResource of this MediaResource.  # noqa: E501
        :rtype: MediaResource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self) -> str:
        """Gets the account_type of this MediaResource.


        :return: The account_type of this MediaResource.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this MediaResource.


        :param account_type: The account_type of this MediaResource.
        :type account_type: str
        """
        allowed_values = ["MEDIA_UNSPECIFIED", "News", "Reddit", "Twitter", "Webpage"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def account_id(self) -> str:
        """Gets the account_id of this MediaResource.


        :return: The account_id of this MediaResource.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this MediaResource.


        :param account_id: The account_id of this MediaResource.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def user_names(self) -> List[str]:
        """Gets the user_names of this MediaResource.


        :return: The user_names of this MediaResource.
        :rtype: List[str]
        """
        return self._user_names

    @user_names.setter
    def user_names(self, user_names: List[str]):
        """Sets the user_names of this MediaResource.


        :param user_names: The user_names of this MediaResource.
        :type user_names: List[str]
        """

        self._user_names = user_names

    @property
    def hashed_user_names(self) -> List[str]:
        """Gets the hashed_user_names of this MediaResource.


        :return: The hashed_user_names of this MediaResource.
        :rtype: List[str]
        """
        return self._hashed_user_names

    @hashed_user_names.setter
    def hashed_user_names(self, hashed_user_names: List[str]):
        """Sets the hashed_user_names of this MediaResource.


        :param hashed_user_names: The hashed_user_names of this MediaResource.
        :type hashed_user_names: List[str]
        """

        self._hashed_user_names = hashed_user_names

    @property
    def account_status(self) -> str:
        """Gets the account_status of this MediaResource.


        :return: The account_status of this MediaResource.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status: str):
        """Sets the account_status of this MediaResource.


        :param account_status: The account_status of this MediaResource.
        :type account_status: str
        """

        self._account_status = account_status

    @property
    def display_names(self) -> List[str]:
        """Gets the display_names of this MediaResource.


        :return: The display_names of this MediaResource.
        :rtype: List[str]
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names: List[str]):
        """Sets the display_names of this MediaResource.


        :param display_names: The display_names of this MediaResource.
        :type display_names: List[str]
        """

        self._display_names = display_names

    @property
    def verified(self) -> bool:
        """Gets the verified of this MediaResource.


        :return: The verified of this MediaResource.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """Sets the verified of this MediaResource.


        :param verified: The verified of this MediaResource.
        :type verified: bool
        """

        self._verified = verified

    @property
    def url(self) -> str:
        """Gets the url of this MediaResource.


        :return: The url of this MediaResource.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this MediaResource.


        :param url: The url of this MediaResource.
        :type url: str
        """

        self._url = url
