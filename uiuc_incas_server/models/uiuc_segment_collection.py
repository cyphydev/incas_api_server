# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.6.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UiucSegmentCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_name': 'str',
        'provider_name': 'str',
        'version': 'str',
        'segments': 'dict(str, dict(str, float))',
        'extra_attributes': 'ExtraAttributes'
    }

    attribute_map = {
        'collection_name': 'collectionName',
        'provider_name': 'providerName',
        'version': 'version',
        'segments': 'segments',
        'extra_attributes': 'extraAttributes'
    }

    def __init__(self, collection_name=None, provider_name=None, version=None, segments=None, extra_attributes=None):  # noqa: E501
        """UiucSegmentCollection - a model defined in Swagger"""  # noqa: E501
        self._collection_name = None
        self._provider_name = None
        self._version = None
        self._segments = None
        self._extra_attributes = None
        self.discriminator = None
        if collection_name is not None:
            self.collection_name = collection_name
        if provider_name is not None:
            self.provider_name = provider_name
        if version is not None:
            self.version = version
        if segments is not None:
            self.segments = segments
        if extra_attributes is not None:
            self.extra_attributes = extra_attributes

    @property
    def collection_name(self):
        """Gets the collection_name of this UiucSegmentCollection.  # noqa: E501

        Name of the segment.  # noqa: E501

        :return: The collection_name of this UiucSegmentCollection.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this UiucSegmentCollection.

        Name of the segment.  # noqa: E501

        :param collection_name: The collection_name of this UiucSegmentCollection.  # noqa: E501
        :type: str
        """

        self._collection_name = collection_name

    @property
    def provider_name(self):
        """Gets the provider_name of this UiucSegmentCollection.  # noqa: E501

        The team (e.g., UIUC-DMG) who provides the segment.  # noqa: E501

        :return: The provider_name of this UiucSegmentCollection.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this UiucSegmentCollection.

        The team (e.g., UIUC-DMG) who provides the segment.  # noqa: E501

        :param provider_name: The provider_name of this UiucSegmentCollection.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def version(self):
        """Gets the version of this UiucSegmentCollection.  # noqa: E501

        The version within the same (provider, name).  # noqa: E501

        :return: The version of this UiucSegmentCollection.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UiucSegmentCollection.

        The version within the same (provider, name).  # noqa: E501

        :param version: The version of this UiucSegmentCollection.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def segments(self):
        """Gets the segments of this UiucSegmentCollection.  # noqa: E501

        Different segment sets with user probability.  # noqa: E501

        :return: The segments of this UiucSegmentCollection.  # noqa: E501
        :rtype: dict(str, dict(str, float))
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this UiucSegmentCollection.

        Different segment sets with user probability.  # noqa: E501

        :param segments: The segments of this UiucSegmentCollection.  # noqa: E501
        :type: dict(str, dict(str, float))
        """

        self._segments = segments

    @property
    def extra_attributes(self):
        """Gets the extra_attributes of this UiucSegmentCollection.  # noqa: E501


        :return: The extra_attributes of this UiucSegmentCollection.  # noqa: E501
        :rtype: ExtraAttributes
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes):
        """Sets the extra_attributes of this UiucSegmentCollection.


        :param extra_attributes: The extra_attributes of this UiucSegmentCollection.  # noqa: E501
        :type: ExtraAttributes
        """

        self._extra_attributes = extra_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UiucSegmentCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UiucSegmentCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
