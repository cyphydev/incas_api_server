# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uiuc_incas_server.models.base_model_ import Model
from uiuc_incas_server.models.base_actor_enrichment import BaseActorEnrichment  # noqa: F401,E501
from uiuc_incas_server import util


class TextActorEnrichment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, actor_uuid: str=None, provider_name: str=None, enrichment_name: str=None, version: str=None, confidence: float=None, enrichment_type: str=None, attribute_value: str=None):  # noqa: E501
        """TextActorEnrichment - a model defined in Swagger

        :param actor_uuid: The actor_uuid of this TextActorEnrichment.  # noqa: E501
        :type actor_uuid: str
        :param provider_name: The provider_name of this TextActorEnrichment.  # noqa: E501
        :type provider_name: str
        :param enrichment_name: The enrichment_name of this TextActorEnrichment.  # noqa: E501
        :type enrichment_name: str
        :param version: The version of this TextActorEnrichment.  # noqa: E501
        :type version: str
        :param confidence: The confidence of this TextActorEnrichment.  # noqa: E501
        :type confidence: float
        :param enrichment_type: The enrichment_type of this TextActorEnrichment.  # noqa: E501
        :type enrichment_type: str
        :param attribute_value: The attribute_value of this TextActorEnrichment.  # noqa: E501
        :type attribute_value: str
        """
        self.swagger_types = {
            'actor_uuid': str,
            'provider_name': str,
            'enrichment_name': str,
            'version': str,
            'confidence': float,
            'enrichment_type': str,
            'attribute_value': str
        }

        self.attribute_map = {
            'actor_uuid': 'actorUuid',
            'provider_name': 'providerName',
            'enrichment_name': 'enrichmentName',
            'version': 'version',
            'confidence': 'confidence',
            'enrichment_type': 'enrichmentType',
            'attribute_value': 'attributeValue'
        }
        self._actor_uuid = actor_uuid
        self._provider_name = provider_name
        self._enrichment_name = enrichment_name
        self._version = version
        self._confidence = confidence
        self._enrichment_type = enrichment_type
        self._attribute_value = attribute_value

    @classmethod
    def from_dict(cls, dikt) -> 'TextActorEnrichment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TextActorEnrichment of this TextActorEnrichment.  # noqa: E501
        :rtype: TextActorEnrichment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_uuid(self) -> str:
        """Gets the actor_uuid of this TextActorEnrichment.


        :return: The actor_uuid of this TextActorEnrichment.
        :rtype: str
        """
        return self._actor_uuid

    @actor_uuid.setter
    def actor_uuid(self, actor_uuid: str):
        """Sets the actor_uuid of this TextActorEnrichment.


        :param actor_uuid: The actor_uuid of this TextActorEnrichment.
        :type actor_uuid: str
        """

        self._actor_uuid = actor_uuid

    @property
    def provider_name(self) -> str:
        """Gets the provider_name of this TextActorEnrichment.

        The team (e.g., USC) who provides the enrichment.  # noqa: E501

        :return: The provider_name of this TextActorEnrichment.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name: str):
        """Sets the provider_name of this TextActorEnrichment.

        The team (e.g., USC) who provides the enrichment.  # noqa: E501

        :param provider_name: The provider_name of this TextActorEnrichment.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def enrichment_name(self) -> str:
        """Gets the enrichment_name of this TextActorEnrichment.

        The enrichment (e.g., age, gender) name for the enrichment.  # noqa: E501

        :return: The enrichment_name of this TextActorEnrichment.
        :rtype: str
        """
        return self._enrichment_name

    @enrichment_name.setter
    def enrichment_name(self, enrichment_name: str):
        """Sets the enrichment_name of this TextActorEnrichment.

        The enrichment (e.g., age, gender) name for the enrichment.  # noqa: E501

        :param enrichment_name: The enrichment_name of this TextActorEnrichment.
        :type enrichment_name: str
        """

        self._enrichment_name = enrichment_name

    @property
    def version(self) -> str:
        """Gets the version of this TextActorEnrichment.

        The version within the same (provider, enrichmentName).  # noqa: E501

        :return: The version of this TextActorEnrichment.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this TextActorEnrichment.

        The version within the same (provider, enrichmentName).  # noqa: E501

        :param version: The version of this TextActorEnrichment.
        :type version: str
        """

        self._version = version

    @property
    def confidence(self) -> float:
        """Gets the confidence of this TextActorEnrichment.

        The confidence that this enrichment is correct, expressed as a percentage between 0.0 and 1.0  # noqa: E501

        :return: The confidence of this TextActorEnrichment.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this TextActorEnrichment.

        The confidence that this enrichment is correct, expressed as a percentage between 0.0 and 1.0  # noqa: E501

        :param confidence: The confidence of this TextActorEnrichment.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def enrichment_type(self) -> str:
        """Gets the enrichment_type of this TextActorEnrichment.

        For discriminator  # noqa: E501

        :return: The enrichment_type of this TextActorEnrichment.
        :rtype: str
        """
        return self._enrichment_type

    @enrichment_type.setter
    def enrichment_type(self, enrichment_type: str):
        """Sets the enrichment_type of this TextActorEnrichment.

        For discriminator  # noqa: E501

        :param enrichment_type: The enrichment_type of this TextActorEnrichment.
        :type enrichment_type: str
        """
        allowed_values = ["category", "numerical", "array", "text"]  # noqa: E501
        if enrichment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `enrichment_type` ({0}), must be one of {1}"
                .format(enrichment_type, allowed_values)
            )

        self._enrichment_type = enrichment_type

    @property
    def attribute_value(self) -> str:
        """Gets the attribute_value of this TextActorEnrichment.


        :return: The attribute_value of this TextActorEnrichment.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value: str):
        """Sets the attribute_value of this TextActorEnrichment.


        :param attribute_value: The attribute_value of this TextActorEnrichment.
        :type attribute_value: str
        """

        self._attribute_value = attribute_value
