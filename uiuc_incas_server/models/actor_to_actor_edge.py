# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uiuc_incas_server.models.base_model_ import Model
from uiuc_incas_server.models.base_edge import BaseEdge  # noqa: F401,E501
from uiuc_incas_server import util


class ActorToActorEdge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, edge_id: str=None, time_stamp: str=None, provider_name: str=None, enrichment_name: str=None, distance_name: str=None, version: str=None, distance: float=None, edge_type: str=None, actor_id1: str=None, actor_id2: str=None, weight: float=None):  # noqa: E501
        """ActorToActorEdge - a model defined in Swagger

        :param edge_id: The edge_id of this ActorToActorEdge.  # noqa: E501
        :type edge_id: str
        :param time_stamp: The time_stamp of this ActorToActorEdge.  # noqa: E501
        :type time_stamp: str
        :param provider_name: The provider_name of this ActorToActorEdge.  # noqa: E501
        :type provider_name: str
        :param enrichment_name: The enrichment_name of this ActorToActorEdge.  # noqa: E501
        :type enrichment_name: str
        :param distance_name: The distance_name of this ActorToActorEdge.  # noqa: E501
        :type distance_name: str
        :param version: The version of this ActorToActorEdge.  # noqa: E501
        :type version: str
        :param distance: The distance of this ActorToActorEdge.  # noqa: E501
        :type distance: float
        :param edge_type: The edge_type of this ActorToActorEdge.  # noqa: E501
        :type edge_type: str
        :param actor_id1: The actor_id1 of this ActorToActorEdge.  # noqa: E501
        :type actor_id1: str
        :param actor_id2: The actor_id2 of this ActorToActorEdge.  # noqa: E501
        :type actor_id2: str
        :param weight: The weight of this ActorToActorEdge.  # noqa: E501
        :type weight: float
        """
        self.swagger_types = {
            'edge_id': str,
            'time_stamp': str,
            'provider_name': str,
            'enrichment_name': str,
            'distance_name': str,
            'version': str,
            'distance': float,
            'edge_type': str,
            'actor_id1': str,
            'actor_id2': str,
            'weight': float
        }

        self.attribute_map = {
            'edge_id': 'edgeId',
            'time_stamp': 'timeStamp',
            'provider_name': 'providerName',
            'enrichment_name': 'enrichmentName',
            'distance_name': 'distanceName',
            'version': 'version',
            'distance': 'distance',
            'edge_type': 'edgeType',
            'actor_id1': 'actorId1',
            'actor_id2': 'actorId2',
            'weight': 'weight'
        }
        self._edge_id = edge_id
        self._time_stamp = time_stamp
        self._provider_name = provider_name
        self._enrichment_name = enrichment_name
        self._distance_name = distance_name
        self._version = version
        self._distance = distance
        self._edge_type = edge_type
        self._actor_id1 = actor_id1
        self._actor_id2 = actor_id2
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt) -> 'ActorToActorEdge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActorToActorEdge of this ActorToActorEdge.  # noqa: E501
        :rtype: ActorToActorEdge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge_id(self) -> str:
        """Gets the edge_id of this ActorToActorEdge.


        :return: The edge_id of this ActorToActorEdge.
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id: str):
        """Sets the edge_id of this ActorToActorEdge.


        :param edge_id: The edge_id of this ActorToActorEdge.
        :type edge_id: str
        """

        self._edge_id = edge_id

    @property
    def time_stamp(self) -> str:
        """Gets the time_stamp of this ActorToActorEdge.


        :return: The time_stamp of this ActorToActorEdge.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: str):
        """Sets the time_stamp of this ActorToActorEdge.


        :param time_stamp: The time_stamp of this ActorToActorEdge.
        :type time_stamp: str
        """

        self._time_stamp = time_stamp

    @property
    def provider_name(self) -> str:
        """Gets the provider_name of this ActorToActorEdge.

        The team who builds this graph.  # noqa: E501

        :return: The provider_name of this ActorToActorEdge.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name: str):
        """Sets the provider_name of this ActorToActorEdge.

        The team who builds this graph.  # noqa: E501

        :param provider_name: The provider_name of this ActorToActorEdge.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def enrichment_name(self) -> str:
        """Gets the enrichment_name of this ActorToActorEdge.

        The type of enrichment used to construct the graph.  # noqa: E501

        :return: The enrichment_name of this ActorToActorEdge.
        :rtype: str
        """
        return self._enrichment_name

    @enrichment_name.setter
    def enrichment_name(self, enrichment_name: str):
        """Sets the enrichment_name of this ActorToActorEdge.

        The type of enrichment used to construct the graph.  # noqa: E501

        :param enrichment_name: The enrichment_name of this ActorToActorEdge.
        :type enrichment_name: str
        """

        self._enrichment_name = enrichment_name

    @property
    def distance_name(self) -> str:
        """Gets the distance_name of this ActorToActorEdge.

        The type of distance used to contruct the graph edges.  # noqa: E501

        :return: The distance_name of this ActorToActorEdge.
        :rtype: str
        """
        return self._distance_name

    @distance_name.setter
    def distance_name(self, distance_name: str):
        """Sets the distance_name of this ActorToActorEdge.

        The type of distance used to contruct the graph edges.  # noqa: E501

        :param distance_name: The distance_name of this ActorToActorEdge.
        :type distance_name: str
        """

        self._distance_name = distance_name

    @property
    def version(self) -> str:
        """Gets the version of this ActorToActorEdge.

        The version ID within the same (providerName, enrichmentName, distanceName)  # noqa: E501

        :return: The version of this ActorToActorEdge.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ActorToActorEdge.

        The version ID within the same (providerName, enrichmentName, distanceName)  # noqa: E501

        :param version: The version of this ActorToActorEdge.
        :type version: str
        """

        self._version = version

    @property
    def distance(self) -> float:
        """Gets the distance of this ActorToActorEdge.


        :return: The distance of this ActorToActorEdge.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this ActorToActorEdge.


        :param distance: The distance of this ActorToActorEdge.
        :type distance: float
        """

        self._distance = distance

    @property
    def edge_type(self) -> str:
        """Gets the edge_type of this ActorToActorEdge.

        For discriminator  # noqa: E501

        :return: The edge_type of this ActorToActorEdge.
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type: str):
        """Sets the edge_type of this ActorToActorEdge.

        For discriminator  # noqa: E501

        :param edge_type: The edge_type of this ActorToActorEdge.
        :type edge_type: str
        """
        allowed_values = ["MessageToMessageEdge", "ActorToActorEdge", "ActorToMessageEdge", "MessageToActorEdge"]  # noqa: E501
        if edge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `edge_type` ({0}), must be one of {1}"
                .format(edge_type, allowed_values)
            )

        self._edge_type = edge_type

    @property
    def actor_id1(self) -> str:
        """Gets the actor_id1 of this ActorToActorEdge.


        :return: The actor_id1 of this ActorToActorEdge.
        :rtype: str
        """
        return self._actor_id1

    @actor_id1.setter
    def actor_id1(self, actor_id1: str):
        """Sets the actor_id1 of this ActorToActorEdge.


        :param actor_id1: The actor_id1 of this ActorToActorEdge.
        :type actor_id1: str
        """

        self._actor_id1 = actor_id1

    @property
    def actor_id2(self) -> str:
        """Gets the actor_id2 of this ActorToActorEdge.


        :return: The actor_id2 of this ActorToActorEdge.
        :rtype: str
        """
        return self._actor_id2

    @actor_id2.setter
    def actor_id2(self, actor_id2: str):
        """Sets the actor_id2 of this ActorToActorEdge.


        :param actor_id2: The actor_id2 of this ActorToActorEdge.
        :type actor_id2: str
        """

        self._actor_id2 = actor_id2

    @property
    def weight(self) -> float:
        """Gets the weight of this ActorToActorEdge.


        :return: The weight of this ActorToActorEdge.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this ActorToActorEdge.


        :param weight: The weight of this ActorToActorEdge.
        :type weight: float
        """

        self._weight = weight
