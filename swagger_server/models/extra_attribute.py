# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExtraAttribute(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, id: str=None, provider_name: str=None, attribute_key: str=None, attribute_value: str=None):  # noqa: E501
        """ExtraAttribute - a model defined in Swagger

        :param name: The name of this ExtraAttribute.  # noqa: E501
        :type name: str
        :param id: The id of this ExtraAttribute.  # noqa: E501
        :type id: str
        :param provider_name: The provider_name of this ExtraAttribute.  # noqa: E501
        :type provider_name: str
        :param attribute_key: The attribute_key of this ExtraAttribute.  # noqa: E501
        :type attribute_key: str
        :param attribute_value: The attribute_value of this ExtraAttribute.  # noqa: E501
        :type attribute_value: str
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'provider_name': str,
            'attribute_key': str,
            'attribute_value': str
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'provider_name': 'providerName',
            'attribute_key': 'attributeKey',
            'attribute_value': 'attributeValue'
        }
        self._name = name
        self._id = id
        self._provider_name = provider_name
        self._attribute_key = attribute_key
        self._attribute_value = attribute_value

    @classmethod
    def from_dict(cls, dikt) -> 'ExtraAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExtraAttribute of this ExtraAttribute.  # noqa: E501
        :rtype: ExtraAttribute
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ExtraAttribute.


        :return: The name of this ExtraAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ExtraAttribute.


        :param name: The name of this ExtraAttribute.
        :type name: str
        """

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this ExtraAttribute.


        :return: The id of this ExtraAttribute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ExtraAttribute.


        :param id: The id of this ExtraAttribute.
        :type id: str
        """

        self._id = id

    @property
    def provider_name(self) -> str:
        """Gets the provider_name of this ExtraAttribute.


        :return: The provider_name of this ExtraAttribute.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name: str):
        """Sets the provider_name of this ExtraAttribute.


        :param provider_name: The provider_name of this ExtraAttribute.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def attribute_key(self) -> str:
        """Gets the attribute_key of this ExtraAttribute.


        :return: The attribute_key of this ExtraAttribute.
        :rtype: str
        """
        return self._attribute_key

    @attribute_key.setter
    def attribute_key(self, attribute_key: str):
        """Sets the attribute_key of this ExtraAttribute.


        :param attribute_key: The attribute_key of this ExtraAttribute.
        :type attribute_key: str
        """

        self._attribute_key = attribute_key

    @property
    def attribute_value(self) -> str:
        """Gets the attribute_value of this ExtraAttribute.


        :return: The attribute_value of this ExtraAttribute.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value: str):
        """Sets the attribute_value of this ExtraAttribute.


        :param attribute_value: The attribute_value of this ExtraAttribute.
        :type attribute_value: str
        """

        self._attribute_value = attribute_value
