# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.actor_to_message_edge import ActorToMessageEdge  # noqa: F401,E501
from swagger_server.models.base_graph import BaseGraph  # noqa: F401,E501
from swagger_server import util


class ActorMessageGraph(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, graph_id: str=None, provider_name: str=None, graph_name: str=None, distance_name: str=None, version: str=None, time_stamp: str=None, platform: str=None, edge_types: List[str]=None, edges: List[ActorToMessageEdge]=None):  # noqa: E501
        """ActorMessageGraph - a model defined in Swagger

        :param graph_id: The graph_id of this ActorMessageGraph.  # noqa: E501
        :type graph_id: str
        :param provider_name: The provider_name of this ActorMessageGraph.  # noqa: E501
        :type provider_name: str
        :param graph_name: The graph_name of this ActorMessageGraph.  # noqa: E501
        :type graph_name: str
        :param distance_name: The distance_name of this ActorMessageGraph.  # noqa: E501
        :type distance_name: str
        :param version: The version of this ActorMessageGraph.  # noqa: E501
        :type version: str
        :param time_stamp: The time_stamp of this ActorMessageGraph.  # noqa: E501
        :type time_stamp: str
        :param platform: The platform of this ActorMessageGraph.  # noqa: E501
        :type platform: str
        :param edge_types: The edge_types of this ActorMessageGraph.  # noqa: E501
        :type edge_types: List[str]
        :param edges: The edges of this ActorMessageGraph.  # noqa: E501
        :type edges: List[ActorToMessageEdge]
        """
        self.swagger_types = {
            'graph_id': str,
            'provider_name': str,
            'graph_name': str,
            'distance_name': str,
            'version': str,
            'time_stamp': str,
            'platform': str,
            'edge_types': List[str],
            'edges': List[ActorToMessageEdge]
        }

        self.attribute_map = {
            'graph_id': 'graphId',
            'provider_name': 'providerName',
            'graph_name': 'graphName',
            'distance_name': 'distanceName',
            'version': 'version',
            'time_stamp': 'timeStamp',
            'platform': 'platform',
            'edge_types': 'edgeTypes',
            'edges': 'edges'
        }
        self._graph_id = graph_id
        self._provider_name = provider_name
        self._graph_name = graph_name
        self._distance_name = distance_name
        self._version = version
        self._time_stamp = time_stamp
        self._platform = platform
        self._edge_types = edge_types
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'ActorMessageGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActorMessageGraph of this ActorMessageGraph.  # noqa: E501
        :rtype: ActorMessageGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_id(self) -> str:
        """Gets the graph_id of this ActorMessageGraph.

        This is the unique ID associated to the graph instance.  # noqa: E501

        :return: The graph_id of this ActorMessageGraph.
        :rtype: str
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id: str):
        """Sets the graph_id of this ActorMessageGraph.

        This is the unique ID associated to the graph instance.  # noqa: E501

        :param graph_id: The graph_id of this ActorMessageGraph.
        :type graph_id: str
        """

        self._graph_id = graph_id

    @property
    def provider_name(self) -> str:
        """Gets the provider_name of this ActorMessageGraph.

        The team who builds this graph.  # noqa: E501

        :return: The provider_name of this ActorMessageGraph.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name: str):
        """Sets the provider_name of this ActorMessageGraph.

        The team who builds this graph.  # noqa: E501

        :param provider_name: The provider_name of this ActorMessageGraph.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def graph_name(self) -> str:
        """Gets the graph_name of this ActorMessageGraph.

        The name assigned to the algorithm/method used to construct the graph.  # noqa: E501

        :return: The graph_name of this ActorMessageGraph.
        :rtype: str
        """
        return self._graph_name

    @graph_name.setter
    def graph_name(self, graph_name: str):
        """Sets the graph_name of this ActorMessageGraph.

        The name assigned to the algorithm/method used to construct the graph.  # noqa: E501

        :param graph_name: The graph_name of this ActorMessageGraph.
        :type graph_name: str
        """

        self._graph_name = graph_name

    @property
    def distance_name(self) -> str:
        """Gets the distance_name of this ActorMessageGraph.

        The distance function used to build the graph.  # noqa: E501

        :return: The distance_name of this ActorMessageGraph.
        :rtype: str
        """
        return self._distance_name

    @distance_name.setter
    def distance_name(self, distance_name: str):
        """Sets the distance_name of this ActorMessageGraph.

        The distance function used to build the graph.  # noqa: E501

        :param distance_name: The distance_name of this ActorMessageGraph.
        :type distance_name: str
        """

        self._distance_name = distance_name

    @property
    def version(self) -> str:
        """Gets the version of this ActorMessageGraph.

        The version ID within the same (providerName, graphName, distanceName)  # noqa: E501

        :return: The version of this ActorMessageGraph.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ActorMessageGraph.

        The version ID within the same (providerName, graphName, distanceName)  # noqa: E501

        :param version: The version of this ActorMessageGraph.
        :type version: str
        """

        self._version = version

    @property
    def time_stamp(self) -> str:
        """Gets the time_stamp of this ActorMessageGraph.

        Used for distinguishing the dynamic graph on time dimension.  # noqa: E501

        :return: The time_stamp of this ActorMessageGraph.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: str):
        """Sets the time_stamp of this ActorMessageGraph.

        Used for distinguishing the dynamic graph on time dimension.  # noqa: E501

        :param time_stamp: The time_stamp of this ActorMessageGraph.
        :type time_stamp: str
        """

        self._time_stamp = time_stamp

    @property
    def platform(self) -> str:
        """Gets the platform of this ActorMessageGraph.


        :return: The platform of this ActorMessageGraph.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this ActorMessageGraph.


        :param platform: The platform of this ActorMessageGraph.
        :type platform: str
        """
        allowed_values = ["MEDIA_UNSPECIFIED", "News", "Reddit", "Twitter"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def edge_types(self) -> List[str]:
        """Gets the edge_types of this ActorMessageGraph.

        The set of all available edge types.  # noqa: E501

        :return: The edge_types of this ActorMessageGraph.
        :rtype: List[str]
        """
        return self._edge_types

    @edge_types.setter
    def edge_types(self, edge_types: List[str]):
        """Sets the edge_types of this ActorMessageGraph.

        The set of all available edge types.  # noqa: E501

        :param edge_types: The edge_types of this ActorMessageGraph.
        :type edge_types: List[str]
        """

        self._edge_types = edge_types

    @property
    def edges(self) -> List[ActorToMessageEdge]:
        """Gets the edges of this ActorMessageGraph.


        :return: The edges of this ActorMessageGraph.
        :rtype: List[ActorToMessageEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[ActorToMessageEdge]):
        """Sets the edges of this ActorMessageGraph.


        :param edges: The edges of this ActorMessageGraph.
        :type edges: List[ActorToMessageEdge]
        """

        self._edges = edges
