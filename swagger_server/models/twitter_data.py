# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TwitterData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, like_count: int=None, retweet_count: int=None, twitter_author_screenname: str=None, tweet_id: str=None, twitter_user_id: str=None, following_count: int=None, follower_count: int=None, engagement_type: str=None, engagement_parent_id: str=None, mentioned_users: List[str]=None):  # noqa: E501
        """TwitterData - a model defined in Swagger

        :param like_count: The like_count of this TwitterData.  # noqa: E501
        :type like_count: int
        :param retweet_count: The retweet_count of this TwitterData.  # noqa: E501
        :type retweet_count: int
        :param twitter_author_screenname: The twitter_author_screenname of this TwitterData.  # noqa: E501
        :type twitter_author_screenname: str
        :param tweet_id: The tweet_id of this TwitterData.  # noqa: E501
        :type tweet_id: str
        :param twitter_user_id: The twitter_user_id of this TwitterData.  # noqa: E501
        :type twitter_user_id: str
        :param following_count: The following_count of this TwitterData.  # noqa: E501
        :type following_count: int
        :param follower_count: The follower_count of this TwitterData.  # noqa: E501
        :type follower_count: int
        :param engagement_type: The engagement_type of this TwitterData.  # noqa: E501
        :type engagement_type: str
        :param engagement_parent_id: The engagement_parent_id of this TwitterData.  # noqa: E501
        :type engagement_parent_id: str
        :param mentioned_users: The mentioned_users of this TwitterData.  # noqa: E501
        :type mentioned_users: List[str]
        """
        self.swagger_types = {
            'like_count': int,
            'retweet_count': int,
            'twitter_author_screenname': str,
            'tweet_id': str,
            'twitter_user_id': str,
            'following_count': int,
            'follower_count': int,
            'engagement_type': str,
            'engagement_parent_id': str,
            'mentioned_users': List[str]
        }

        self.attribute_map = {
            'like_count': 'likeCount',
            'retweet_count': 'retweetCount',
            'twitter_author_screenname': 'twitterAuthorScreenname',
            'tweet_id': 'tweetId',
            'twitter_user_id': 'twitterUserId',
            'following_count': 'followingCount',
            'follower_count': 'followerCount',
            'engagement_type': 'engagementType',
            'engagement_parent_id': 'engagementParentId',
            'mentioned_users': 'mentionedUsers'
        }
        self._like_count = like_count
        self._retweet_count = retweet_count
        self._twitter_author_screenname = twitter_author_screenname
        self._tweet_id = tweet_id
        self._twitter_user_id = twitter_user_id
        self._following_count = following_count
        self._follower_count = follower_count
        self._engagement_type = engagement_type
        self._engagement_parent_id = engagement_parent_id
        self._mentioned_users = mentioned_users

    @classmethod
    def from_dict(cls, dikt) -> 'TwitterData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TwitterData of this TwitterData.  # noqa: E501
        :rtype: TwitterData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def like_count(self) -> int:
        """Gets the like_count of this TwitterData.


        :return: The like_count of this TwitterData.
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count: int):
        """Sets the like_count of this TwitterData.


        :param like_count: The like_count of this TwitterData.
        :type like_count: int
        """

        self._like_count = like_count

    @property
    def retweet_count(self) -> int:
        """Gets the retweet_count of this TwitterData.


        :return: The retweet_count of this TwitterData.
        :rtype: int
        """
        return self._retweet_count

    @retweet_count.setter
    def retweet_count(self, retweet_count: int):
        """Sets the retweet_count of this TwitterData.


        :param retweet_count: The retweet_count of this TwitterData.
        :type retweet_count: int
        """

        self._retweet_count = retweet_count

    @property
    def twitter_author_screenname(self) -> str:
        """Gets the twitter_author_screenname of this TwitterData.


        :return: The twitter_author_screenname of this TwitterData.
        :rtype: str
        """
        return self._twitter_author_screenname

    @twitter_author_screenname.setter
    def twitter_author_screenname(self, twitter_author_screenname: str):
        """Sets the twitter_author_screenname of this TwitterData.


        :param twitter_author_screenname: The twitter_author_screenname of this TwitterData.
        :type twitter_author_screenname: str
        """

        self._twitter_author_screenname = twitter_author_screenname

    @property
    def tweet_id(self) -> str:
        """Gets the tweet_id of this TwitterData.


        :return: The tweet_id of this TwitterData.
        :rtype: str
        """
        return self._tweet_id

    @tweet_id.setter
    def tweet_id(self, tweet_id: str):
        """Sets the tweet_id of this TwitterData.


        :param tweet_id: The tweet_id of this TwitterData.
        :type tweet_id: str
        """

        self._tweet_id = tweet_id

    @property
    def twitter_user_id(self) -> str:
        """Gets the twitter_user_id of this TwitterData.


        :return: The twitter_user_id of this TwitterData.
        :rtype: str
        """
        return self._twitter_user_id

    @twitter_user_id.setter
    def twitter_user_id(self, twitter_user_id: str):
        """Sets the twitter_user_id of this TwitterData.


        :param twitter_user_id: The twitter_user_id of this TwitterData.
        :type twitter_user_id: str
        """

        self._twitter_user_id = twitter_user_id

    @property
    def following_count(self) -> int:
        """Gets the following_count of this TwitterData.


        :return: The following_count of this TwitterData.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count: int):
        """Sets the following_count of this TwitterData.


        :param following_count: The following_count of this TwitterData.
        :type following_count: int
        """

        self._following_count = following_count

    @property
    def follower_count(self) -> int:
        """Gets the follower_count of this TwitterData.


        :return: The follower_count of this TwitterData.
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count: int):
        """Sets the follower_count of this TwitterData.


        :param follower_count: The follower_count of this TwitterData.
        :type follower_count: int
        """

        self._follower_count = follower_count

    @property
    def engagement_type(self) -> str:
        """Gets the engagement_type of this TwitterData.


        :return: The engagement_type of this TwitterData.
        :rtype: str
        """
        return self._engagement_type

    @engagement_type.setter
    def engagement_type(self, engagement_type: str):
        """Sets the engagement_type of this TwitterData.


        :param engagement_type: The engagement_type of this TwitterData.
        :type engagement_type: str
        """
        allowed_values = ["ENGAGEMENT_UNSPECIFIED", "mention", "quote", "reply", "retweet", "tweet", "page_post"]  # noqa: E501
        if engagement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engagement_type` ({0}), must be one of {1}"
                .format(engagement_type, allowed_values)
            )

        self._engagement_type = engagement_type

    @property
    def engagement_parent_id(self) -> str:
        """Gets the engagement_parent_id of this TwitterData.


        :return: The engagement_parent_id of this TwitterData.
        :rtype: str
        """
        return self._engagement_parent_id

    @engagement_parent_id.setter
    def engagement_parent_id(self, engagement_parent_id: str):
        """Sets the engagement_parent_id of this TwitterData.


        :param engagement_parent_id: The engagement_parent_id of this TwitterData.
        :type engagement_parent_id: str
        """

        self._engagement_parent_id = engagement_parent_id

    @property
    def mentioned_users(self) -> List[str]:
        """Gets the mentioned_users of this TwitterData.


        :return: The mentioned_users of this TwitterData.
        :rtype: List[str]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users: List[str]):
        """Sets the mentioned_users of this TwitterData.


        :param mentioned_users: The mentioned_users of this TwitterData.
        :type mentioned_users: List[str]
        """

        self._mentioned_users = mentioned_users
