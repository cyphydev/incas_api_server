# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.extra_attributes import ExtraAttributes  # noqa: F401,E501
from swagger_server import util


class UiucSegment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, referenced_actor_uuid: List[str]=None, extra_attributes: ExtraAttributes=None):  # noqa: E501
        """UiucSegment - a model defined in Swagger

        :param uuid: The uuid of this UiucSegment.  # noqa: E501
        :type uuid: str
        :param referenced_actor_uuid: The referenced_actor_uuid of this UiucSegment.  # noqa: E501
        :type referenced_actor_uuid: List[str]
        :param extra_attributes: The extra_attributes of this UiucSegment.  # noqa: E501
        :type extra_attributes: ExtraAttributes
        """
        self.swagger_types = {
            'uuid': str,
            'referenced_actor_uuid': List[str],
            'extra_attributes': ExtraAttributes
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'referenced_actor_uuid': 'referencedActorUuid',
            'extra_attributes': 'extraAttributes'
        }
        self._uuid = uuid
        self._referenced_actor_uuid = referenced_actor_uuid
        self._extra_attributes = extra_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'UiucSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UiucSegment of this UiucSegment.  # noqa: E501
        :rtype: UiucSegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this UiucSegment.

        The unique segment identifier  # noqa: E501

        :return: The uuid of this UiucSegment.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this UiucSegment.

        The unique segment identifier  # noqa: E501

        :param uuid: The uuid of this UiucSegment.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def referenced_actor_uuid(self) -> List[str]:
        """Gets the referenced_actor_uuid of this UiucSegment.


        :return: The referenced_actor_uuid of this UiucSegment.
        :rtype: List[str]
        """
        return self._referenced_actor_uuid

    @referenced_actor_uuid.setter
    def referenced_actor_uuid(self, referenced_actor_uuid: List[str]):
        """Sets the referenced_actor_uuid of this UiucSegment.


        :param referenced_actor_uuid: The referenced_actor_uuid of this UiucSegment.
        :type referenced_actor_uuid: List[str]
        """

        self._referenced_actor_uuid = referenced_actor_uuid

    @property
    def extra_attributes(self) -> ExtraAttributes:
        """Gets the extra_attributes of this UiucSegment.


        :return: The extra_attributes of this UiucSegment.
        :rtype: ExtraAttributes
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes: ExtraAttributes):
        """Sets the extra_attributes of this UiucSegment.


        :param extra_attributes: The extra_attributes of this UiucSegment.
        :type extra_attributes: ExtraAttributes
        """

        self._extra_attributes = extra_attributes
